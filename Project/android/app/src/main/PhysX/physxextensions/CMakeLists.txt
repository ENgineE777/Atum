cmake_minimum_required(VERSION 3.4.1)

set( DIR_physx ../../../../../../../../PhysX/physx )
set( DIR_pxshared ../../../../../../../../PhysX/pxshared )
set( DIR_physx_physxextensions ../../../../../../../../PhysX/physx/source/physxextensions/ )

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -std=c++11 -fno-rtti -fno-exceptions -ffunction-sections -fdata-sections")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/Common/src/windows")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/common/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/common/src")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/contact")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/common")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/convex")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/distance")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/sweep")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/gjk")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/intersection")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/mesh")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/hf")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/geomutils/src/pcm")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physxmetadata/core/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physxmetadata/extensions/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physxextensions/src")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physxextensions/src/serialization/Xml")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physxextensions/src/serialization/Binary")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physxextensions/src/serialization/File")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/pvdsdk/src")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/physx/src")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/pvd/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/fastxml/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/../pxshared/include")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --include-directory=${DIR_physx}/source/foundation/include")


add_library(physxextensions STATIC

			${DIR_physx}/source/physxmetadata/extensions/src/PxExtensionAutoGeneratedMetaDataObjects.cpp

			${DIR_physx_physxextensions}/src/ExtBroadPhase.cpp
			${DIR_physx_physxextensions}/src/ExtCollection.cpp
			${DIR_physx_physxextensions}/src/ExtContactJoint.cpp
			${DIR_physx_physxextensions}/src/ExtConvexMeshExt.cpp
			${DIR_physx_physxextensions}/src/ExtCpuWorkerThread.cpp
			${DIR_physx_physxextensions}/src/ExtD6Joint.cpp
			${DIR_physx_physxextensions}/src/ExtD6JointCreate.cpp
			${DIR_physx_physxextensions}/src/ExtDefaultCpuDispatcher.cpp
			${DIR_physx_physxextensions}/src/ExtDefaultErrorCallback.cpp
			${DIR_physx_physxextensions}/src/ExtDefaultSimulationFilterShader.cpp
			${DIR_physx_physxextensions}/src/ExtDefaultStreams.cpp
			${DIR_physx_physxextensions}/src/ExtDistanceJoint.cpp
			${DIR_physx_physxextensions}/src/ExtExtensions.cpp
			${DIR_physx_physxextensions}/src/ExtFixedJoint.cpp
			${DIR_physx_physxextensions}/src/ExtJoint.cpp
			${DIR_physx_physxextensions}/src/ExtMetaData.cpp
			${DIR_physx_physxextensions}/src/ExtPrismaticJoint.cpp
			${DIR_physx_physxextensions}/src/ExtPvd.cpp
			${DIR_physx_physxextensions}/src/ExtPxStringTable.cpp
			${DIR_physx_physxextensions}/src/ExtRaycastCCD.cpp
			${DIR_physx_physxextensions}/src/ExtRevoluteJoint.cpp
			${DIR_physx_physxextensions}/src/ExtRigidActorExt.cpp
			${DIR_physx_physxextensions}/src/ExtRigidBodyExt.cpp
			${DIR_physx_physxextensions}/src/ExtSceneQueryExt.cpp
			${DIR_physx_physxextensions}/src/ExtSimpleFactory.cpp
			${DIR_physx_physxextensions}/src/ExtSmoothNormals.cpp
			${DIR_physx_physxextensions}/src/ExtSphericalJoint.cpp
			${DIR_physx_physxextensions}/src/ExtTriangleMeshExt.cpp
        
			${DIR_physx_physxextensions}/src/serialization/SnSerialization.cpp
			${DIR_physx_physxextensions}/src/serialization/SnSerializationRegistry.cpp
			${DIR_physx_physxextensions}/src/serialization/SnSerialUtils.cpp

			${DIR_physx_physxextensions}/src/serialization/Binary/SnBinaryDeserialization.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnBinarySerialization.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX_Align.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX_Convert.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX_Error.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX_MetaData.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX_Output.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnConvX_Union.cpp
			${DIR_physx_physxextensions}/src/serialization/Binary/SnSerializationContext.cpp

			${DIR_physx_physxextensions}/src/serialization/Xml/SnJointRepXSerializer.cpp
			${DIR_physx_physxextensions}/src/serialization/Xml/SnRepXCoreSerializer.cpp
			${DIR_physx_physxextensions}/src/serialization/Xml/SnRepXUpgrader.cpp
			${DIR_physx_physxextensions}/src/serialization/Xml/SnXmlSerialization.cpp
            )

target_link_libraries(physxextensions
            android
            log
            m)
