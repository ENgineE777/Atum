#import "MainScript"

class CatBossData : ChracterData
{
    bool active = false;
    int cur_stage = 0;
    float attacking_time = -1.0f;
    uint  card_index = 0;
    float next_throw = 0.45f;

    void Init() override
    {
        ChracterData::Init();

        move_speed = 400.0f;
        accel_speed = 700.0f;
        stop_speed = 1500.0f;
        jump_impulse = -420;
        horz_flipped_inv = true;
    }
}

class BossCat
{
    array<ThrowableBox> empty_cards;
    array<ThrowableBox> boss_cards;
    array<PhysBox> fake_card;
    array<BaseCharacter> boss_markers;
    array<CatBossData> boss_inst;
    Trigger2D@ next_level;
    MusicPlayer@ level_music;
    MusicPlayer@ boss_music;
    Game@ game;

    void OnActivateTrigger(int self_index, string&in name, int index)
    {
        if (boss_inst[0].hp > 0 && !boss_inst[0].active)
        {
            boss_inst[0].active = true;

            level_music.FadeOut(1.5f);
            boss_music.FadeIn(1.5f);
        }
    }

    void OnHeroContact(int self_index, string&in name, int index)
    {
        if (name == "CatBoss")
        {
            game.HitHero();
        }
    }

    void OnCardContact(int self_index, string&in name, int index)
    {
        if (boss_cards[self_index].visible == 0)
        {
            return;
        }

        bool need_discard = false;

        if ((name == "Hero" || name == "CatBoss") && boss_cards[self_index].data != 2)
        {
            if (name == "Hero" && boss_cards[self_index].data == 1)
            {
                game.HitHero();
            }

            if (name == "CatBoss" && boss_cards[self_index].data == 0)
            {
                boss_inst[0].hp--;

                if (boss_inst[0].hp == 0)
                {
                    level_music.FadeIn(1.5f);
                    boss_music.FadeOut(1.5f);

                    next_level.SetState(2);

                    boss_inst[0].active = false;
                    boss_inst[0].visible = 0;
                    game.enemy_death.AddInstance(boss_inst[0].x, boss_inst[0].y, true);
                }
            }

            need_discard = true;
        }
        if (boss_cards[self_index].data == 0)
        {
            need_discard = true;
        }
        else
        {
            boss_cards[self_index].data = 2;
        }

        if (need_discard)
        {
            boss_cards[self_index].visible = 0;
            boss_cards[self_index].in_fly = -1.0f;
            game.enemy_death.AddInstance(boss_cards[self_index].x, boss_cards[self_index].y, true);

            game.PlaySound(SoundType::HeroHitted);
        }
    }

    void ControllCatBoss(CatBossData@ cat_data, float dt)
    {
        if (cat_data.cur_stage == 0 || cat_data.cur_stage == 1)
        {
            cat_data.graph.ActivateLink("run");

            cat_data.dir_x = -1.0f;

            if (cat_data.cur_stage == 0 && boss_inst[0].x < boss_markers[2].x)
            {
                cat_data.velocity_y = cat_data.jump_impulse;
                cat_data.cur_stage++;
            }
            else
            if (cat_data.cur_stage == 1 && boss_inst[0].x < boss_markers[3].x)
            {
                cat_data.graph.ActivateLink("idle");
                boss_inst[0].horz_flipped = 1;
                cat_data.attacking_time = 1.5f;
                cat_data.next_throw = 0.45f;
                cat_data.cur_stage++;
            }
        }
        else
        if (cat_data.cur_stage == 2 || cat_data.cur_stage == 6)
        {
            cat_data.dir_x = 0.0f;

            if (abs(cat_data.velocity_x) < 0.001f)
            {
                boss_inst[0].horz_flipped = cat_data.cur_stage == 2 ? 1 : 0;
                cat_data.cur_stage++;
            }
        }
        else
        if (cat_data.cur_stage == 3 || cat_data.cur_stage == 7)
        {
            cat_data.attacking_time -= dt;

            if (cat_data.next_throw > 0.0f)
            {
                cat_data.next_throw -= dt;

                if (cat_data.next_throw < 0.01f)
                {   
                    cat_data.card_index++;
                    cat_data.card_index = cat_data.card_index % 3;

                    boss_cards[cat_data.card_index].visible = 1;
                    boss_cards[cat_data.card_index].x = boss_inst[0].x + 160 * (cat_data.cur_stage == 3 ? 1.0f : -1.0f);
                    boss_cards[cat_data.card_index].y = boss_inst[0].y - 96;
                    boss_cards[cat_data.card_index].in_fly = 3.0f;
                    boss_cards[cat_data.card_index].data = 1;

                    float vec_x = game.hero_inst[0].x - boss_cards[cat_data.card_index].x;
                    float vec_y = game.hero_inst[0].y - boss_cards[cat_data.card_index].y;

                    float len = sqrt(vec_x * vec_x + vec_y * vec_y);
                    vec_x /= len;
                    vec_y /= len;

                    boss_cards[cat_data.card_index].phys.SetGroup(3);
                    boss_cards[cat_data.card_index].phys.ApplyLinearImpulse(vec_x * 45.0f, vec_y * 35.0f);

                    game.PlaySound(SoundType::ThrowBox);

                    cat_data.next_throw = 0.45f;
                }
            }

            if (cat_data.attacking_time < 0.0f)
            {
                cat_data.graph.ActivateLink("idle");

                cat_data.cur_stage++;

                if (cat_data.cur_stage == 8)
                {
                    cat_data.cur_stage = 0;
                }
            }
            else
            {
                cat_data.graph.ActivateLink("attack");
            }
        }
        else
        if (cat_data.cur_stage == 4 || cat_data.cur_stage == 5)
        {
            cat_data.graph.ActivateLink("run");

            cat_data.dir_x = 1.0f;

            if (cat_data.cur_stage == 4 && boss_inst[0].x > boss_markers[1].x)
            {
                cat_data.velocity_y = cat_data.jump_impulse;
                cat_data.cur_stage++;
            }
            else
            if (cat_data.cur_stage == 5 && boss_inst[0].x > boss_markers[0].x)
            {
                cat_data.graph.ActivateLink("idle");
                boss_inst[0].horz_flipped = 1;
                cat_data.attacking_time = 1.5f;
                cat_data.next_throw = 0.45f;
                cat_data.cur_stage++;
            }
        }

        if (cat_data.phys.CheckColission(true) && cat_data.velocity_y > 25.0f)
        {
            cat_data.velocity_y = 0.0f;
        }

        game.MoveCharacter(cat_data, dt);
    }

    void OnRespawnHero()
    {
        for (int i = 0; i < boss_cards.get_length(); i++)
        {
            boss_cards[i].in_fly = -1.0f;
            boss_cards[i].visible = 0;
        }

        next_level.SetState(0);

        level_music.FadeIn(0.0f);
        boss_music.FadeOut(0.0f);

        boss_inst[0].active = false;
        boss_inst[0].graph.GotoNode("idle");
        boss_inst[0].hp = 3;
        boss_inst[0].cur_stage = 0;
        boss_inst[0].phys.MoveTo(boss_markers[0].x, boss_markers[0].y);
    }

    void OnInit()
    {
        boss_cards.resize(3);

        for (int i = 0; i < boss_cards.get_length(); i++)
        {
            boss_cards[i].in_fly = -1.0f;
            boss_cards[i].visible = 0;
        }

        game.RegisterThrowableBoxes(empty_cards, fake_card, boss_cards, 0);
        boss_inst[0].Init();
    }

    void Update(float dt)
    {
        if (boss_inst[0].active && boss_inst[0].hp != 0)
        {
            ControllCatBoss(boss_inst[0], dt);
        }
    }
}