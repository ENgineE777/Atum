
class Bullet
{
	float x,y;
	float alpha;
	float angle;
	float size_x;
	float dir_x;
	float dir_y;
	float dist;
	float fade_time = -1.0f;
}

class Crosshair 
{
	float x,y;	
}

class Character
{
	float x,y;
	float prev_x = 0; 
	float prev_y = 0;	
	int hp = 5;
	bool horz_flipped;
}

class Game
{
	array<Crosshair> crosshair;
	Sprite@ bullet_obj;
	Sprite@ blood_hit;
	array<Bullet> bullets;
	Camera2D@ camera;
	array<Character> hero;
	SpriteGraph@ hero_obj;
	array<Character> enemies;
	SpriteGraph@ enemies_obj;

	float speed = 500.0f;
	bool inited = false;

	int alias_move_vert = -1;
	int alias_move_horz = -1;
	int alias_aim_vert = -1;
	int alias_aim_horz = -1;
	int alias_fire = -1;

	float crosshair_dist = 90.0f;
	float crosshair_fire_dist = 20.0f;
	float crosshair_dir_x = 0.0f;
	float crosshair_dir_y = -1.0f;

	void Update(float dt)
	{
		if (!inited)
		{
			alias_move_vert = Control_GetAlias("Frog.MOVE_VERT");
			alias_move_horz = Control_GetAlias("Frog.MOVE_HORZ");
			alias_aim_vert = Control_GetAlias("Frog.AIM_VERT");
			alias_aim_horz = Control_GetAlias("Frog.AIM_HORZ");
			alias_fire = Control_GetAlias("Frog.Fire");

			inited = true;
		}

		float dir_x = Control_GetValue(alias_move_horz, 0);
		float dir_y = -Control_GetValue(alias_move_vert, 0);

		if (abs(dir_x) > 0.2f || abs(dir_y) > 0.2f)
		{
			float len = sqrt(dir_x * dir_x + dir_y * dir_y);
			dir_x /= len;
			dir_y /= len;

			hero[0].x += dir_x * dt * speed;
			hero[0].y += dir_y * dt * speed;
		}

		dir_x = Control_GetValue(alias_aim_horz, 0);
		dir_y = -Control_GetValue(alias_aim_vert, 0);
		
		if (abs(dir_x) > 0.2f || abs(dir_y) > 0.2f)
		{
			string node = "Idle_";

			if (abs(dir_x) > 0.1f)
			{
				node += "Left";
			}

			hero[0].horz_flipped = dir_x > 0.01f ? false : true;

			if (dir_y < -0.01f)
			{
				node += "Up";
			}
			else
			if (dir_y > 0.01f)
			{
				node += "Down";
			}

			node += "_Rf";

			hero_obj.GotoNode(0, node);

			float len = sqrt(dir_x * dir_x + dir_y * dir_y);
			crosshair_dir_x = dir_x / len;
			crosshair_dir_y = dir_y / len;
		}

		crosshair[0].x = hero[0].x + crosshair_dir_x * crosshair_dist;
		crosshair[0].y = hero[0].y - 95 + crosshair_dir_y * crosshair_dist;

		camera.target_pos_x = hero[0].x;
		camera.target_pos_y = hero[0].y;

		for (int index = 0; index<enemies.length(); index++)
		{
			Character@ enemy = enemies[index];
				
			if (enemy.hp == 0)
			{
				continue;
			}

			float dir_x = enemy.x - enemy.prev_x;
			float dir_y = enemy.y - enemy.prev_y;

			enemy.prev_x = enemy.x;
			enemy.prev_y = enemy.y;


			float len = sqrt(dir_x * dir_x + dir_y * dir_y);

			if (len < 0.001f)
			{
				continue;
			}
			
			dir_x /= len;
			dir_y /= len;

			string node = "Idle_";

			if (abs(dir_x) > 0.1f)
			{
				node += "Left";
			}

			enemy.horz_flipped = dir_x > 0.01f ? false : true;

			if (dir_y < -0.01f)
			{
				node += "Up";
			}
			else
			if (dir_y > 0.01f)
			{
				node += "Down";
			}

			enemies_obj.GotoNode(index, node);
		}

		for (int index = 0; index<bullets.length(); index++)
		{
			Bullet@ bullet = bullets[index];

			if (bullet.fade_time > 0.0f)
			{
				bullet.fade_time -= dt * 2.0f;
				bullet.alpha = bullet.fade_time;

				if (bullet.fade_time < 0.001f)
				{
					bullet_obj.RemoveInstance(index);
					index--;
				}
			}
			else
			{
				float len = dt * 2000.0f;
				bullet.dist += len;
				bullet.size_x += len;

				if (bullet.dist > 1500.0f)
				{
					bullet.fade_time = 1.0f;
				}

				if (bullet.dist < 250.0f)
				{
					bullet.alpha = bullet.dist / 250.0f;
				}
				else
				{
					bullet.alpha = 1.0f;
				}

				bullet.x += bullet.dir_x * len;
				bullet.y += bullet.dir_y * len;

				for (int j = 0; j<enemies.length();j++)
				{
					Character@ enemy = enemies[j];
				
					if (enemy.hp == 0)
					{
						continue;
					}

					if (enemy.x - 35 < bullet.x && bullet.x < enemy.x + 35 &&
						enemy.y - 95 - 35 < bullet.y && bullet.y < enemy.y - 95 + 35)
					{
						bullet.fade_time = 1.0f;

						blood_hit.AddInstance(bullet.x, bullet.y, true);
						
						enemy.hp--;

						if (enemy.hp == 0)
						{
							enemies_obj.SetActiveTrack(j, false);
							enemies_obj.GotoNode(j, "Die");
						}
					}
				}
			}
		}

		if (Control_GetState(alias_fire, 1) > 0)
		{
			int index = bullet_obj.AddInstance(hero[0].x + crosshair_dir_x * crosshair_fire_dist, hero[0].y - 95 + crosshair_dir_y * crosshair_fire_dist, false);
				
			bullets[index].dir_x = crosshair_dir_x;
			bullets[index].dir_y = crosshair_dir_y;
			bullets[index].dist = 0;
			bullets[index].angle = atan2(crosshair_dir_y, crosshair_dir_x);
			bullets[index].alpha = 0.0f;
			bullets[index].size_x = 0.0f;
		}
	}
}