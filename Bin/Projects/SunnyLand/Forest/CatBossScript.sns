#import "MainScript"

class ForestCatBossData : ChracterData
{
    bool active = false;
    int cur_stage = 0;
    float attacking_time = -1.0f;
    float stage_timer = 0.0f;
    uint  card_index = 0;
    float next_throw = 0.45f;
    float delta_height_time = 0.0f;
    float cat_dust_timer = 0.0f;
    int   facing = 1;

    void Init() override
    {
        ChracterData::Init();

        move_speed = 300.0f;
        accel_speed = 500.0f;
        stop_speed = 2500.0f;
        jump_impulse = -420.0f;
        accel_gravity = 0.0f;
        horz_flipped_inv = true;
    }
}

class ForestCatBoss
{
	array<ThrowableBox> empty_boxes;
    array<ThrowableBox> boss_boxes;
    array<PhysBox> fake_box;

	array<BaseCharacter> boss_markers;
    array<ForestCatBossData> cat_boss;
    Trigger2D@ next_level;

    MusicPlayer@ level_music;
    MusicPlayer@ boss_music;

    Game@ game;

    float EaseInOutCubic(float x)
    {
		return 1 - cos( x * 3.14 / 2.0 );
	}

	void OnActivateTrigger(int self_index, string&in name, int index)
    {
    	core.render.DebugText(20, 20, "asdfdasf");
        if (cat_boss[0].hp > 0 && !cat_boss[0].active)
        {
            cat_boss[0].active = true;

            level_music.FadeOut(1.5f);
            boss_music.FadeIn(1.5f);
        }
    }

    void OnHeroContact(int self_index, string&in name, int index)
    {
        if (name == "CatBoss")
        {
            game.HitHero();
        }
    }

	void OnCardContact(int self_index, string&in name, int index)
    {
        if (boss_boxes[self_index].visible == 0)
        {
            return;
        }

        bool need_discard = false;

        if ((name == "Hero" || name == "CatBoss") && boss_boxes[self_index].data != 2)
        {
            if (name == "Hero" && boss_boxes[self_index].data == 1)
            {
                game.HitHero();
            }

            if (name == "CatBoss" && boss_boxes[self_index].data == 0)
            {
                cat_boss[0].hp--;

                if (cat_boss[0].hp == 0)
                {
                	level_music.FadeIn(1.5f);
                    boss_music.FadeOut(1.5f);

                    next_level.SetState(2);

                    cat_boss[0].active = false;
                    cat_boss[0].visible = 0;
                    game.enemy_death.AddInstance(cat_boss[0].x, cat_boss[0].y, true);
                }
            }

            need_discard = true;
        }
        if (boss_boxes[self_index].data == 0)
        {
            need_discard = true;
        }
        else
        {
            boss_boxes[self_index].data = 2;
        }

        if (need_discard)
        {
            boss_boxes[self_index].visible = 0;
            boss_boxes[self_index].in_fly = -1.0f;
            game.enemy_death.AddInstance(boss_boxes[self_index].x, boss_boxes[self_index].y, true);

            game.PlaySound(SoundType::HeroHitted);
        }
    }

	void OnRespawnHero()
    {
        for (int i = 0; i < boss_boxes.get_length(); i++)
        {
            boss_boxes[i].in_fly = -1.0f;
            boss_boxes[i].visible = 0;
        }

        next_level.SetState(0);

        level_music.FadeIn(0.0f);
        boss_music.FadeOut(0.0f);

        cat_boss[0].active = false;
        cat_boss[0].graph.GotoNode("Fly");
        cat_boss[0].hp = 3;
        cat_boss[0].cur_stage = 0.0f;
        cat_boss[0].stage_timer = 0.0f;
        cat_boss[0].phys.MoveTo(boss_markers[0].x, boss_markers[0].y);
    }

	void ControllCatBoss(ForestCatBossData@ cat_data, float dt)
	{
		if (cat_data.cur_stage == 0 || cat_data.cur_stage == 1)
		{
			cat_data.delta_height_time += dt * 1.5;

			if (cat_data.delta_height_time > 2.0f)
			{
				cat_data.delta_height_time -= 2.0;
			}

			float delta_height = 0.0;

			if (cat_data.delta_height_time < 1.0)
			{
				delta_height = EaseInOutCubic(cat_data.delta_height_time);

			}
			else
			if (cat_data.delta_height_time < 2.0)
			{
				delta_height = (1.0f - EaseInOutCubic(cat_data.delta_height_time - 1.0));
			}

			cat_data.phys.Move(0.0f, boss_markers[0].y + delta_height * 40.0 - cat_data.y, 1, 8);
		}

		if (cat_data.cur_stage == 0)
		{
			if ((cat_data.facing ==  1 && game.hero_inst[0].x - cat_data.x < -500) ||
				(cat_data.facing == -1 && game.hero_inst[0].x - cat_data.x <  500))
			{
				cat_data.dir_x = -1.0f;
			}
			else
			if ((cat_data.facing ==  1 && game.hero_inst[0].x - cat_data.x > -500) ||
				(cat_data.facing == -1 && game.hero_inst[0].x - cat_data.x >  500))
			{
				cat_data.dir_x = 1.0f;
			}
			else
			{
				cat_data.dir_x = 0;
			}
			
			game.MoveCharacter(cat_data, dt);

			cat_data.horz_flipped = (cat_data.facing == 1) ? 0 : 1;

			cat_data.stage_timer += dt;

			if (cat_data.stage_timer > 7.0f)
			{
				cat_data.cur_stage = 1;
			}
		}
		else
		if (cat_data.cur_stage == 1)
		{
			int marker_index = cat_data.facing == 1 ? 0 : 3;

			if (cat_data.x < boss_markers[marker_index].x)
			{
				cat_data.dir_x = 1;	
			}
			else
			if (cat_data.x > boss_markers[marker_index].x)
			{
				cat_data.dir_x = -1;	
			}

			game.MoveCharacter(cat_data, dt);
			cat_data.horz_flipped = (cat_data.facing == 1) ? 0 : 1;

			if (abs(cat_data.x - boss_markers[marker_index].x) < 128)
			{
				cat_data.cur_stage = 2;
				cat_data.dir_x = (cat_data.facing == 1) ? -1 : 1;
				cat_data.accel_speed = 2500;
				cat_data.move_speed = 400;
			}
		}
		else
		if (cat_data.cur_stage == 2)
		{
			if (cat_data.y < boss_markers[2].y)
			{
				cat_data.phys.Move(0.0f, dt * 300.0f, 1, 8);
			}
			else
			{
				cat_data.cur_stage = 3;
				cat_data.stage_timer = 0.0f;
				cat_data.graph.ActivateLink("Slide");

				boss_boxes[0].visible = 1;
                boss_boxes[0].x = cat_data.x + 85 * (cat_data.facing == 1 ? 1.0f : -1.0f);
                boss_boxes[0].y = cat_data.y - 35;
                boss_boxes[0].in_fly = 3.0f;
                boss_boxes[0].data = 1;

                boss_boxes[0].phys.SetGroup(3);
                boss_boxes[0].phys.ApplyLinearImpulse(5.0f * cat_data.facing, -5.0f);

                game.PlaySound(SoundType::ThrowBox);
			}

			game.MoveCharacter(cat_data, dt);
		}
		else
		if (cat_data.cur_stage == 3)
		{
			cat_data.stage_timer += dt;

			if (cat_data.stage_timer > 1.75f)
			{
				cat_data.graph.ActivateLink("Fly");

				if (cat_data.y > boss_markers[3].y)
				{
					cat_data.phys.Move(0.0f, -dt * 300.0f, 1, 8);
				}
				else
				{
					cat_data.cur_stage = 0;
					cat_data.stage_timer = 0.0f;

					cat_data.facing = -cat_data.facing;

					cat_data.accel_speed = 500;
					cat_data.move_speed = 300;
				}
			}
			else
			{
				cat_data.cat_dust_timer -= dt;

				if (cat_data.cat_dust_timer < 0.0f)
				{
					cat_data.cat_dust_timer = 0.1f;

					for (int i = 0; i < 3; i++)
					{
						game.AddDust(cat_data, 1);
					}
				}
			}

			game.MoveCharacter(cat_data, dt);
		}
	}

    void Init()
    {
        boss_boxes.resize(3);
        game.RegisterThrowableBoxes(empty_boxes, fake_box, boss_boxes, 0);
        cat_boss[0].Init();
    }

	void Update(float dt)
	{
		if (cat_boss[0].active && cat_boss[0].hp != 0)
		{
			ControllCatBoss(cat_boss[0], dt);
		}
	}
}