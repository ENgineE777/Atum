class Enemy
{
    float x, y;
    int horz_flipped;
    int visible;
}

class Bonus
{
    float x, y;
    int visible;
    int score;
}

class PhysBox
{
    float x, y;
    int visible;
    float init_x, init_y;
}

class ThrowableBox
{
    float x, y;
    int visible;
    int contact_nums = 0;
    float in_fly = -1.0f;
}

class Game
{
    array<Bonus> diamonds;
    array<Bonus> cherries;
    array<Enemy> eagles;
    array<Enemy> opposums;
    array<PhysBox> respawn_points;
    Sprite@ boxes_object;
    array<PhysBox> boxes;
    Sprite@ boxes_level_object;
    array<PhysBox> fake_box;
    array<ThrowableBox> fly_boxes;
    array<ThrowableBox> boss_cards;
    array<Enemy> boss_markers;
    array<PhysBox> fake_card;
    Sprite@ cards_object;
    array<PhysBox> bridge;
    array<PhysBox> bridge_dyn;
    Sprite@ bridge_object;
    SpriteGraph@ hero;
    SpriteGraph@ boss;
    CharacterCamera2D@ camera;
    Sprite@ item_taken;
    Sprite@ enemy_death;
    VirtualJoystick@ vjoy;

    UIImage@ heart1;
    UIImage@ heart2;
    UIImage@ heart3;
    UILabel@ score_label;
    UIImage@ fade;
    UIImage@ start_label;
    UIContainer@ pause_menu;
    UIView@ main_menu;
    UIView@ level_ui;

    float move_speed = 10.0f;
    float accel_speed = 40.0f;
    float stop_speed = 30.0f; 
    float jump_impulse = -30.0f;    

    int box_grabbed = -1;
    int card_grabbed = -1;

    int cur_respawn_point = 0;
    float in_hit = -1.0f;

    int hero_hp = 3;
    int hero_score = 0;

    bool falling_bridge = false;
    uint falling_bridge_index = 0;
    float falling_bridge_time = 0.16f;

    bool boss_active = false;
    int  boss_hp = 3;
    float boss_move = 7.0f;
    float boss_accel_speed = 20.0f;
    float boss_stop_speed = 50.0f;
    float boss_jump_impulse = -240;
    int boss_stage = 0;
    float boss_attacking_time = -1.0f;
    uint  boss_card_index = 0;
    float boss_next_throw = 0.45f;

    float fade_out = -1.0f;

    bool is_paused = false;

    bool init = false;

    float return_to_title = -1.0f;

    float title_menu_pos_x = 0.0f;
    float label_fade = 2.0f;

    void ShowPauseMenu(int show)
    {
        is_paused = (show == 1);
        fade.alpha = (show == 1) ? 0.5f : 0.0f;
        pause_menu.SetState((show == 1) ? 2 : 0);
        vjoy.SetState((show == 1) ? 1 : 2);
        Scene_Group_SetState("Level", (show == 1) ? 1 : 2);
    }

    void OnReturnToTitle()
    {
        main_menu.SetState(2);
        is_paused = true;

        title_menu_pos_x = 0.0f;

        level_ui.SetState(0);
        vjoy.SetState(0);
        fade.alpha = 0.0f;
        pause_menu.SetState(0);
        Scene_Group_SetState("Level", 0);
    }

    void OnStartGame()
    {
        is_paused = false;

        for (int i = 0; i<diamonds.length();i++)
        {
            diamonds[i].visible = 1;
        }

        for (int i = 0; i<cherries.length();i++)
        {
            cherries[i].visible = 1;
        }

        main_menu.SetState(0);
        level_ui.SetState(2);
        vjoy.SetState(2);

        Scene_Group_SetState("Level", 2);

        fade_out = -1.0f;
        cur_respawn_point = 0;
        AddScore(-1);
        RespawnHero();
    }

    int FindBox(float pos_x, float pos_y)
    {
        for (uint i=0; i<boxes.length(); i++)
        {
            if (boxes[i].visible == 0)
            {
                continue;
            }

            if (abs(boxes[i].x + 32 - pos_x) < 15 && abs(boxes[i].y - 32 - pos_y) < 32)
            {
                return i;
            }
        }

        return -1;
    }

    int FindCard(float pos_x, float pos_y)
    {
        for (uint i=0; i<boss_cards.length(); i++)
        {
            if (boss_cards[i].visible == 0)
            {
                continue;
            }

            if (abs(boss_cards[i].x - pos_x) < 15 && abs(boss_cards[i].y - 32 - pos_y) < 32)
            {
                return i;
            }
        }

        return -1;
    }

    void HitHero(float x)
    {
        if (in_hit < -0.01f)
        {
            hero_hp--;
            UpdateHearts();

            if (hero_hp == 0)
            {
                fade_out = 2.0f;
            }

            if (box_grabbed != -1)
            {
                fake_box[0].visible = 0;
                enemy_death.AddInstance(fake_box[0].x, fake_box[0].y);
            }

            if (card_grabbed != -1)
            {
                fake_card[0].visible = 1;
                enemy_death.AddInstance(fake_card[0].x, fake_card[0].y);
            }

            hero.GotoNode("Hit");
            in_hit = 1.0f;

            hero.ApplyLinearImpulse(20.0f * (x < hero.x ? 1.0f : -1.0f), -7);
        }
    }

    void UpdateHearts()
    {
        heart1.SetState((hero_hp >= 1) ? 2 : 0);
        heart2.SetState((hero_hp >= 2) ? 2 : 0);
        heart3.SetState((hero_hp >= 3) ? 2 : 0);
    }

    void RespawnHero()
    {
        hero.Move(respawn_points[cur_respawn_point].x, respawn_points[cur_respawn_point].y);
        hero_hp = 3;
        in_hit = -1.0f;
        fake_box[0].visible = 0;
        fake_card[0].visible = 0;
        UpdateHearts();
        hero.GotoNode("Idle");

        return_to_title = -1.0f;
        boss_active = false;
        boss.GotoNode("idle");
        boss_hp = 3;
        box_grabbed = -1;
        card_grabbed = -1;

        item_taken.ClearInstances();
        enemy_death.ClearInstances();

        for (int i = 0; i<eagles.length();i++)
        {
            eagles[i].visible = 1;
        }

        for (int i = 0; i<opposums.length();i++)
        {
            opposums[i].visible = 1;
        }

        for (int i = 0; i<fly_boxes.length();i++)
        {
            fly_boxes[i].visible = 0;
            fly_boxes[i].in_fly = -1.0f;
        }

        for (int i = 0; i<boss_cards.length();i++)
        {
            boss_cards[i].visible = 0;
            boss_cards[i].in_fly = -1.0f;
        }

        for (int i = 0; i<boxes.length();i++)
        {
            boxes[i].visible = 1;
            boxes_level_object.Move(i, boxes[i].init_x, boxes[i].init_y);
        }

        falling_bridge = false;
        falling_bridge_index = 0;

        for (int i = 0; i<bridge.length();i++)
        {
            bridge_dyn[i].visible = 0;
            bridge_object.Move(i, bridge_dyn[i].init_x, bridge_dyn[i].init_y + 1);
        }

        for (int i = 0; i<bridge.length();i++)
        {
            bridge[i].visible = 1;
        }

        boss_hp = 3;
        boss_stage = 0;
        boss.Move(boss_markers[0].x, boss_markers[0].y);
    }

    void AddScore(int score)
    {
        if (score == -1)
        {
            hero_score = 0;
        }
        else
        {
            hero_score += score;
        }

        score_label.SetText("Score: " + hero_score);
    }

    int OnHeroContact(int self_index, string&in name, int index)
    {
        if (name == "CherryItem")
        {
            AddScore(cherries[index].score);
            cherries[index].visible = 0;
            item_taken.AddInstance(cherries[index].x, cherries[index].y);
            return 1;
        }
        else
        if (name == "DiamondItem")
        {
            AddScore(diamonds[index].score);
            diamonds[index].visible = 0;
            item_taken.AddInstance(diamonds[index].x, diamonds[index].y);
            return 1;
        }
        else
        if (name == "EagleFly")
        {
            HitHero(eagles[index].x);
        }
        else
        if (name == "OpposumRun")
        {
            HitHero(opposums[index].x);
        }
        else
        if (name == "CatBoss")
        {
            HitHero(boss.x);
        }
        else
        if (name == "BridgeTrigger")
        {
            if (falling_bridge_index == 0)
            {
                falling_bridge = true;
            }
        }
        else
        if (name == "ActivateBossTrigger")
        {
            boss_active = true;

            if (boss_hp > 0)
            {
                boss.SetState(2);
            }
        }

        return 0;
    }

    int OnBoxContact(int self_index, string&in name, int index)
    {
        if (name == "CherryItem" || name == "DiamondItem")
        {
            return 1;
        }

        if (name == "EagleFly")
        {
            eagles[index].visible = 0;
            enemy_death.AddInstance(eagles[index].x, eagles[index].y);
        }

        if (name == "OpposumRun")
        {
            opposums[index].visible = 0;
            enemy_death.AddInstance(opposums[index].x, opposums[index].y);
        }

        fly_boxes[0].visible = 0;
        fly_boxes[0].in_fly = -1.0f;
        enemy_death.AddInstance(fly_boxes[0].x, fly_boxes[0].y);

        return 0;
    }

    int OnCardContact(int self_index, string&in name, int index)
    {
        if ((name == "Hero" && boss_cards[self_index].contact_nums < 2) || name == "CatBoss")
        {
            if (name == "Hero")
            {
                HitHero(boss_cards[self_index].x);
            }

            if (name == "CatBoss")
            {
                boss_hp--;

                if (boss_hp == 0)
                {
                    return_to_title = 2.0f;
                    boss_active = false;
                    boss.SetState(0);
                    enemy_death.AddInstance(boss.x, boss.y);
                }
            }

            boss_cards[self_index].visible = 0;
            boss_cards[self_index].in_fly = -1.0f;
            enemy_death.AddInstance(boss_cards[self_index].x, boss_cards[self_index].y);
            return 1;
        }

        boss_cards[self_index].contact_nums++;

        return 0;
    }

    int OnActivateResapwnTrigger(int self_index, string&in name, int index, int param)
    {
        if (name == "Hero")
        {
            cur_respawn_point = param;
        }

        return 1;
    }

    int OnRespawnTrigger(int self_index, string&in name, int index)
    {
        if (name == "Hero")
        {
            fade_out = 2.0f;
        }

        return 1;
    }

    void ControlBoss(float dt)
    {
        float velocity_x = boss.GetLinearVelocityX();
        float velocity_y = boss.GetLinearVelocityY();

        if (boss_stage == 0 || boss_stage == 1)
        {
            boss.horz_flipped = false;
            
            boss.ActivateLink("run");

            velocity_x -= dt * boss_accel_speed;

            if (velocity_x < -boss_move)
            {
                velocity_x = -boss_move;
            }

            boss.SetLinearVelocity(velocity_x, velocity_y);

            if (boss_stage == 0 && boss.x < boss_markers[2].x)
            {
                boss.ApplyLinearImpulse(0.0f, boss_jump_impulse);
                boss_stage++;
            }
            else
            if (boss_stage == 1 && boss.x < boss_markers[3].x)
            {
                boss.ActivateLink("idle");
                boss.horz_flipped = true;
                boss_attacking_time = 1.5f;
                boss_next_throw = 0.45f;
                boss_stage++;
            }
        }
        else
        if (boss_stage == 2 || boss_stage == 6)
        {
            if (velocity_x > 0.0001f)
            {
                velocity_x -= dt * boss_stop_speed;

                if (velocity_x <= 0.0001f)
                {
                    boss_stage++;
                    velocity_x = 0.0f;
                }
            }
            else
            if (velocity_x < -0.0001f)
            {
                velocity_x += dt * boss_stop_speed;

                if (velocity_x >= -0.0001f)
                {
                    boss_stage++;
                    velocity_x = 0.0f;
                }
            }
            else
            {
                boss_stage++;
                velocity_x = 0.0f;
            }


            boss.SetLinearVelocity(velocity_x, velocity_y);
        }
        else
        if (boss_stage == 3 || boss_stage == 7)
        {
            boss_attacking_time -= dt;

            if (boss_next_throw > 0.0f)
            {
                boss_next_throw -= dt;

                if (boss_next_throw < 0.01f)
                {   
                    boss_card_index++;
                    boss_card_index = boss_card_index % 3;

                    boss_cards[boss_card_index].visible = 1;
                    boss_cards[boss_card_index].x = boss.x + 160 * (boss_stage == 3 ? 1.0f : -1.0f);
                    boss_cards[boss_card_index].y = boss.y - 96;
                    boss_cards[boss_card_index].in_fly = 3.0f;
                    boss_cards[boss_card_index].contact_nums = 0;

                    float vec_x = hero.x - boss_cards[boss_card_index].x;
                    float vec_y = hero.y - boss_cards[boss_card_index].y;

                    float len = sqrt(vec_x * vec_x + vec_y * vec_y);
                    vec_x /= len;
                    vec_y /= len;

                    cards_object.ApplyLinearImpulse(boss_card_index, vec_x * 25.0f, vec_y * 25.0f);

                    boss_next_throw = 0.45f;
                }
            }

            if (boss_attacking_time < 0.0f)
            {
                boss.ActivateLink("idle");

                boss_stage++;

                if (boss_stage == 8)
                {
                    boss_stage = 0;
                }
            }
            else
            {
                boss.ActivateLink("attack");
            }
        }
        else
        if (boss_stage == 4 || boss_stage == 5)
        {
            boss.horz_flipped = true;
            
            boss.ActivateLink("run");

            velocity_x += dt * boss_accel_speed;

            if (velocity_x > boss_move)
            {
                velocity_x = boss_move;
            }

            boss.SetLinearVelocity(velocity_x, velocity_y);

            if (boss_stage == 4 && boss.x > boss_markers[1].x)
            {
                boss.ApplyLinearImpulse(0.0f, boss_jump_impulse);
                boss_stage++;
            }
            else
            if (boss_stage == 5 && boss.x > boss_markers[0].x)
            {
                boss.ActivateLink("idle");
                boss.horz_flipped = false;
                boss_attacking_time = 1.5f;
                boss_next_throw = 0.45f;
                boss_stage++;
            }
        }
    }

    void ControlPlayer(float dt)
    {
        bool allow_jump = hero.CheckColissionNormal(0, 1.0f) || hero.CheckColissionNormal(0, -1.0f);

        float velocity_x = hero.GetLinearVelocityX();
        float velocity_y = hero.GetLinearVelocityY();

        if (!allow_jump && velocity_y > 0.5f)
        {
            hero.ActivateLink("fall");
        }
        
        if (Control_GetDebugState("KEY_A", 0) > 0 || vjoy.stick_delta_x < -0.5f)
        {
            hero.horz_flipped = true;
            
            if (allow_jump)
            {
                hero.ActivateLink("run");
            }

            velocity_x -= dt * accel_speed;

            if (velocity_x < -move_speed)
            {
                velocity_x = -move_speed;
            }
        }
        else
        if (Control_GetDebugState("KEY_D", 0) > 0 || vjoy.stick_delta_x > 0.5f)
        {
            hero.horz_flipped = false;

            if (allow_jump)
            {
                hero.ActivateLink("run");
            }

            velocity_x += dt * accel_speed;

            if (velocity_x > move_speed)
            {
                velocity_x = move_speed;
            }
        }
        else
        {
            if (velocity_x > 0.0001f)
            {
                velocity_x -= dt * stop_speed;

                if (velocity_x < 0.0f)
                {
                    velocity_x = 0.0f;
                }
            }
            else
            if (velocity_x < -0.0001f)
            {
                velocity_x += dt * stop_speed;

                if (velocity_x > 0.0f)
                {
                    velocity_x = 0.0f;
                }
            }

            if (allow_jump)
            {
                hero.ActivateLink("idle");
            }
        }
        
        hero.SetLinearVelocity(velocity_x, velocity_y);

        if ((Control_GetDebugState("KEY_W", 1) > 0 || vjoy.button_a_pressed == 2) && allow_jump)
        {
            hero.ActivateLink("jump");
            hero.ApplyLinearImpulse(0.0f, jump_impulse);
        }

        if (Control_GetDebugState("KEY_L", 1) > 0 || vjoy.button_b_pressed == 2)
        {
            if (box_grabbed == -1 && card_grabbed == -1)
            {
                if (fly_boxes[0].in_fly > 0.0f)
                {
                    fly_boxes[0].visible = 0;
                    fly_boxes[0].in_fly = -1.0f;
                    enemy_death.AddInstance(fly_boxes[0].x, fly_boxes[0].y);
                }

                box_grabbed = FindBox(hero.x - 64 * (hero.horz_flipped ? 1 : -1), hero.y - 32);

                if (box_grabbed != -1)
                {
                    fake_box[0].visible = 1;
                    boxes[box_grabbed].visible = 0;
                }

                card_grabbed = FindCard(hero.x - 64 * (hero.horz_flipped ? 1 : -1), hero.y - 32);

                if (card_grabbed != -1)
                {
                    fake_card[0].visible = 1;
                    boss_cards[card_grabbed].visible = 0;
                }
            }
            else
            if (box_grabbed != -1)
            {
                fly_boxes[0].visible = 1;
                fly_boxes[0].x = fake_box[0].x;
                fly_boxes[0].y = fake_box[0].y;
                fly_boxes[0].in_fly = 2.0f;

                fake_box[0].visible = 0;

                boxes_object.ApplyLinearImpulse(0, (hero.horz_flipped ? -1 : 1) * 65, 0);
                box_grabbed = -1;
            }
            else
            if (card_grabbed != -1)
            {
                boss_cards[3].visible = 1;
                boss_cards[3].x = fake_card[0].x;
                boss_cards[3].y = fake_card[0].y;
                boss_cards[3].in_fly = 2.0f;

                fake_card[0].visible = 0;

                cards_object.ApplyLinearImpulse(3, (hero.horz_flipped ? -1 : 1) * 75, 0);
                card_grabbed = -1;
            }
        }

        if (box_grabbed != -1)
        {
            fake_box[0].x = hero.x;
            fake_box[0].y = hero.y - 114;
        }

        if (card_grabbed != -1)
        {
            fake_card[0].x = hero.x;
            fake_card[0].y = hero.y - 96;
        }
    }

    void CheckFlyBoxes(array<ThrowableBox>@ boxes, float dt)
    {
        for (uint i = 0; i < boxes.length(); i++)
        {
            if (boxes[i].visible == 0)
            {
                continue;
            }

            if (boxes[i].in_fly > 0.0f)
            {
                boxes[i].in_fly -= dt;

                if (boxes[i].in_fly < 0.0f)
                {
                    boxes[i].visible = 0;
                    enemy_death.AddInstance(boxes[i].x, boxes[i].y);
                    boxes[i].in_fly = -1.0f;
                }
            }
        }
    }

    void Update(float dt)
    {
        if (!init)
        {
            for (int i = 0; i<boxes.length();i++)
            {
                boxes[i].init_x = boxes[i].x;
                boxes[i].init_y = boxes[i].y;
            }

            for (int i = 0; i<bridge_dyn.length();i++)
            {
                bridge_dyn[i].init_x = bridge_dyn[i].x;
                bridge_dyn[i].init_y = bridge_dyn[i].y;
            }

            OnReturnToTitle();

            init = true;

            return;
        }

        if (is_paused)
        {
            if (pause_menu.GetState() != 2)
            {
                title_menu_pos_x += dt * 1000;
                label_fade -= dt;

                start_label.alpha = (label_fade > 1.0f) ? 1.0f : 0.0f;

                while (label_fade < 0.0f)
                {
                    label_fade += 2.0f;
                }

                camera.target_pos_x = title_menu_pos_x;
                camera.x = camera.target_pos_x;
                camera.target_pos_y = -800;
                camera.y = camera.target_pos_y;
            }

            return;
        }

        if (boss_active && boss_hp != 0)
        {
            ControlBoss(dt);
        }

        if (in_hit < -0.01f && hero_hp > 0)
        {
            ControlPlayer(dt);
        }
        else
        {
            in_hit -= dt;

            if (in_hit < 0.0f)
            {
                in_hit = -1.0f;
                hero.ActivateLink("idle");
            }
        }

        CheckFlyBoxes(fly_boxes, dt);
        CheckFlyBoxes(boss_cards, dt);
        
        if (falling_bridge)
        {
            falling_bridge_time -= dt;

            if (falling_bridge_time < 0.0f)
            {
                falling_bridge_time += 0.095f;

                bridge[falling_bridge_index].visible = 0;
                bridge_dyn[falling_bridge_index].visible = 1;
                falling_bridge_index++;

                if (falling_bridge_index == bridge.length())
                {
                    falling_bridge = false;
                }
            }
        }

        if (fade_out > 0.0f)
        {
            float prev_fade_out = fade_out;
            fade_out -= dt * 2.0f;

            if (fade_out > 1.0f)
            {
                fade.alpha = 2.0f - fade_out;
            }
            else
            {
                if (prev_fade_out > 1.0f)
                {
                    RespawnHero();
                }

                fade.alpha = fade_out;
            }

            if (fade_out < 0.01f)
            {
                fade_out = -1.0f;
                fade.alpha = 0.0f;
            }
        }

        if (return_to_title > 0.0f)
        {
            return_to_title -= dt;

            if (return_to_title < 0.01f)
            {
                return_to_title = -1.0f;
                OnReturnToTitle();
            }
        }

        if (fade_out < 1.0f)
        {
            camera.target_pos_x = hero.x;
            camera.target_pos_y = hero.y;
        }
    }
}