#import "GameMenuScript"

class BaseCharacter
{
    float x, y;
    int horz_flipped;
    int visible;
}

class Bonus
{
    float x, y;
    int visible;
    int score;
}

class PhysBox
{
    float x, y;
    int visible;
    float init_x, init_y;
    Phys2D@ phys;
}

class ChracterData : BaseCharacter
{
    Phys2D@ phys;
    Graph2D@ graph;

    float velocity_x = 0.0f;
    float velocity_y = 0.0f;
    float move_speed = 400.0f;
    float accel_speed = 700.0f;
    float stop_speed = 1500.0f; 
    float jump_impulse = -700.0f;

    float accel_gravity = 400.0f;
    float max_gravity = 900.0f;

    float dir_x = 0.0f;

    int hp = 3;
    bool horz_flipped_inv = false;

    void Init()
    {
    }
}

class HeroData : ChracterData
{
    int score = 0;
    int boxes_pool = -1;
    bool box_grabbed = false;
    float in_hit = -1.0f;
    int cur_respawn_point = 0;
}

class ThrowableBox
{
    float x, y;
    float init_x, init_y;
    int visible;
    int contact_nums = 0;
    float in_fly = -1.0f;
    Phys2D@ phys;
}

class ThrowableBoxesHolder
{
    array<ThrowableBox>@ boxes;
    array<PhysBox>@ fake_box;
    array<ThrowableBox>@ fly_boxes;

    float grab_offset = 0.0f;
    int hero_fly_box_index = -1;

    PhysBox@ FakeBox()
    {
        return @fake_box[0];
    }

    ThrowableBox@ FlyBox()
    {
        return @fly_boxes[hero_fly_box_index];
    }
}

class Game
{
    array<PhysBox> respawn_points;

    array<ThrowableBoxesHolder> throwable_boxes;

    array<HeroData> hero_inst;
    Camera2D@ camera;
    Sprite@ item_taken;
    Sprite@ enemy_death;
    VirtualJoystick@ vjoy;

    GameMenu@ game_menu;

    float fade_out = -1.0f;

    bool is_paused = false;

    float return_to_title = -1.0f;

    void RegisterThrowableBoxes(array<ThrowableBox>@ boxes, array<PhysBox>@ fake_box, array<ThrowableBox>@ fly_boxes, float grab_offset)
    {
        ThrowableBoxesHolder holder;

        @holder.boxes = @boxes;
        @holder.fake_box = @fake_box;
        @holder.fly_boxes = @fly_boxes;

        holder.grab_offset = grab_offset;

        fake_box.resize(1);
        fake_box[0].visible = 0;

        holder.fly_boxes.resize(fly_boxes.length() + 1);
        fly_boxes[fly_boxes.length() - 1].visible = 0;

        holder.hero_fly_box_index = fly_boxes.length() - 1;

        for (int j = 0; j<boxes.length(); j++)
        {
            boxes[j].init_x = boxes[j].x;
            boxes[j].init_y = boxes[j].y;
        }

        throwable_boxes.insertLast(holder);
    }

    void OnStartGame()
    {
        is_paused = false;

        core.scene.CallClassInstancesMethod("", "", "OnStartGame");

        game_menu.ShowPauseMenu(0);

        fade_out = -1.0f;
        hero_inst[0].cur_respawn_point = 0;
        AddScore(-1);
        RespawnHero(hero_inst[0]);
    }

    int FindBox(array<ThrowableBox>@ boxes, int diff, float pos_x, float pos_y, float grab_offset)
    {
        for (uint i=0; i<boxes.length() - diff; i++)
        {
            if (boxes[i].visible == 0)
            {
                continue;
            }

            if (abs(boxes[i].x + grab_offset - pos_x) < 15 && abs(boxes[i].y - 32 - pos_y) < 32)
            {
                return i;
            }
        }

        return -1;
    }

    void HitHero(float x)
    {
        HeroData@ hero_data = hero_inst[0];

        if (hero_data.in_hit < -0.01f)
        {
            hero_data.hp--;
            game_menu.UpdateHearts(hero_data.hp);

            if (hero_data.hp == 0)
            {
                fade_out = 2.0f;
            }

            if (hero_data.box_grabbed)
            {
                ThrowableBoxesHolder@ holder = throwable_boxes[hero_data.boxes_pool];

                holder.FlyBox().visible = 0;
                holder.FlyBox().in_fly = -1.0f;

                enemy_death.AddInstance(holder.FlyBox().x, holder.FlyBox().y, true);

                hero_data.box_grabbed = false;
            }

            hero_data.graph.GotoNode("Hit");
            hero_data.in_hit = 1.0f;

            //hero_velocity_x = 
            //hero_velocity_y = 200.0f;
            //jump_impulse

            //hero.ApplyLinearImpulse(20.0f * (x < hero.x ? 1.0f : -1.0f), -7);
        }
    }

    void RespawnHero(HeroData@ hero_data)
    {
        //hero_data.cur_respawn_point = 3;
        
        hero_data.phys.MoveTo(respawn_points[hero_data.cur_respawn_point].x, respawn_points[hero_data.cur_respawn_point].y);
        hero_data.hp = 3;
        hero_data.in_hit = -1.0f;

        game_menu.UpdateHearts(hero_data.hp);

        hero_data.graph.GotoNode("Idle");

        hero_data.velocity_x = 0.0f;
        hero_data.velocity_y = 0.0f;

        return_to_title = -1.0f;

        hero_data.box_grabbed = false;

        item_taken.ClearInstances();
        enemy_death.ClearInstances();

        for (int i = 0; i<throwable_boxes.length(); i++)
        {
            ThrowableBoxesHolder@ holder = throwable_boxes[i];

            holder.FlyBox().visible = 0;
            holder.FlyBox().in_fly = -1.0f;

            for (int j = 0; j<holder.boxes.length(); j++)
            {
                holder.boxes[j].visible = 1;
                holder.boxes[j].phys.MoveTo(holder.boxes[j].init_x, holder.boxes[j].init_y);
            }
        }

        core.scene.CallClassInstancesMethod("", "", "OnRespawnHero");
    }

    void AddScore(int score)
    {
        HeroData@ hero_data = hero_inst[0];

        if (score == -1)
        {
            hero_data.score = 0;
        }
        else
        {
            hero_data.score += score;
        }

        game_menu.SetScore(hero_data.score);
    }

    void OnActivateResapwnTrigger(int self_index, string&in name, int index, int param)
    {
        if (name == "Hero")
        {
            hero_inst[0].cur_respawn_point = param;
        }
    }

    void OnRespawnTrigger(int self_index, string&in name, int index)
    {
        if (name == "Hero" && fade_out < 0.01f)
        {
            fade_out = 2.0f;
        }
    }

    void MoveCharacter(ChracterData@ data, float dt)
    {
        if (data.dir_x < -0.01f)
        {
            data.horz_flipped = data.horz_flipped_inv ? 0 : 1;

            data.velocity_x -= dt * data.accel_speed;

            if (data.velocity_x < -data.move_speed)
            {
                data.velocity_x = -data.move_speed;
            }
        }
        else
        if (data.dir_x > 0.01f)
        {
            data.horz_flipped = data.horz_flipped_inv ? 1 : 0;

            data.velocity_x += dt * data.accel_speed;

            if (data.velocity_x > data.move_speed)
            {
                data.velocity_x = data.move_speed;
            }
        }
        else
        {
            if (data.velocity_x > 0.0001f)
            {
                data.velocity_x -= dt * data.stop_speed;

                if (data.velocity_x < 0.0f)
                {
                    data.velocity_x = 0.0f;
                }
            }
            else
            if (data.velocity_x < -0.0001f)
            {
                data.velocity_x += dt * data.stop_speed;

                if (data.velocity_x > 0.0f)
                {
                    data.velocity_x = 0.0f;
                }
            }
        }

        data.velocity_y += dt * data.accel_gravity;

        if (data.velocity_y > data.max_gravity)
        {
            data.velocity_y = data.max_gravity;
        }

        data.phys.Move(data.velocity_x * dt, data.velocity_y * dt);
    }

    void ControlPlayer(HeroData@ hero_data, float dt)
    {
        bool allow_jump = hero_data.phys.CheckColission(true);

        if (!allow_jump && hero_data.velocity_y > 20.5f)
        {
            hero_data.graph.ActivateLink("fall");
        }
        
        if (core.controls.GetDebugState("KEY_A", 0) > 0 || vjoy.stick_delta_x < -0.5f)
        {
            if (allow_jump)
            {
                hero_data.graph.ActivateLink("run");
            }

            hero_data.dir_x = -1.0f;
        }
        else
        if (core.controls.GetDebugState("KEY_D", 0) > 0 || vjoy.stick_delta_x > 0.5f)
        {
            if (allow_jump)
            {
                hero_data.graph.ActivateLink("run");
            }

            hero_data.dir_x = 1.0f;
        }
        else
        {
            hero_data.dir_x = 0.0f;

            if (allow_jump)
            {
                hero_data.graph.ActivateLink("idle");
            }
        }

        if (allow_jump && hero_data.velocity_y > 25.0f)
        {
            hero_data.velocity_y = 0.0f;
        }
        else
        {
            if (hero_data.velocity_y < 0.0f)
            {
                if (hero_data.phys.CheckColission(false))
                {
                    hero_data.velocity_y = 0.0f;
                }
            }

            hero_data.velocity_y += dt * hero_data.accel_gravity;

            if (hero_data.velocity_y > hero_data.max_gravity)
            {
                hero_data.velocity_y = hero_data.max_gravity;
            }
        }

        if ((core.controls.GetDebugState("KEY_W", 1) > 0 || vjoy.button_a_pressed == 2) && allow_jump)
        {
            hero_data.graph.ActivateLink("jump");
            hero_data.velocity_y = hero_data.jump_impulse;
        }

        MoveCharacter(hero_data, dt);

        if (core.controls.GetDebugState("KEY_L", 1) > 0 || vjoy.button_b_pressed == 2)
        {
            if (!hero_data.box_grabbed)
            {
                for (int i = 0; i<throwable_boxes.length(); i++)
                {
                    ThrowableBoxesHolder@ holder = throwable_boxes[i];

                    bool boxes = true;
                    int box_grabbed = FindBox(holder.boxes, 0, hero_data.x - 64 * (hero_data.horz_flipped > 0 ? 1 : -1), hero_data.y - 32, holder.grab_offset);

                    if (box_grabbed == -1)
                    {
                        boxes = false;
                        box_grabbed = FindBox(holder.fly_boxes, 1, hero_data.x - 64 * (hero_data.horz_flipped > 0 ? 1 : -1), hero_data.y - 32, holder.grab_offset);
                    }

                    if (box_grabbed != -1)
                    {
                        if (holder.FlyBox().in_fly > 0.0f)
                        {
                            holder.FlyBox().visible = 0;
                            holder.FlyBox().in_fly = -1.0f;
                            enemy_death.AddInstance(holder.FlyBox().x, holder.FlyBox().y, true);
                        }

                        hero_data.boxes_pool = i;
                        hero_data.box_grabbed = true;
                        holder.FakeBox().visible = 1;

                        if (boxes)
                        {
                            holder.boxes[box_grabbed].visible = 0;
                        }
                        else
                        {
                            holder.fly_boxes[box_grabbed].visible = 0;
                        }

                        break;
                    }
                }
            }
            else
            {
                ThrowableBoxesHolder@ holder = throwable_boxes[hero_data.boxes_pool];

                holder.FlyBox().visible = 1;
                holder.FlyBox().x = holder.FakeBox().x;
                holder.FlyBox().y = holder.FakeBox().y;
                holder.FlyBox().contact_nums = 0;
                holder.FlyBox().in_fly = 2.0f;

                holder.FakeBox().visible = 0;

                holder.FlyBox().phys.ApplyLinearImpulse((hero_data.horz_flipped > 0 ? -1 : 1) * 110, 0);
                hero_data.box_grabbed = false;
            }
        }

        if (hero_data.box_grabbed)
        {
            ThrowableBoxesHolder@ holder = throwable_boxes[hero_data.boxes_pool];

            holder.FakeBox().x = hero_inst[0].x;
            holder.FakeBox().y = hero_inst[0].y - 114;
        }
    }

    void OnInit()
    {
        hero_inst[0].Init();
        OnStartGame();
    }

    void Update(float dt)
    {
        if (is_paused)
        {
            return;
        }

        if (hero_inst[0].in_hit < -0.01f && hero_inst[0].hp > 0)
        {
            ControlPlayer(hero_inst[0], dt);
        }
        else
        {
            hero_inst[0].in_hit -= dt;

            if (hero_inst[0].in_hit < 0.0f)
            {
                hero_inst[0].in_hit = -1.0f;
                hero_inst[0].graph.ActivateLink("idle");
            }
        }

        for (int i = 0; i<throwable_boxes.length(); i++)
        {
            ThrowableBoxesHolder@ holder = throwable_boxes[i];

            for (int j = 0; j<holder.fly_boxes.length(); j++)
            {
                if (holder.fly_boxes[j].visible == 1 || holder.fly_boxes[j].in_fly > 0.0f)
                {
                    holder.fly_boxes[j].in_fly -= dt;

                    if (holder.fly_boxes[j].in_fly < 0.0f)
                    {
                        holder.fly_boxes[j].visible = 0;
                        enemy_death.AddInstance(holder.fly_boxes[j].x, holder.fly_boxes[j].y, true);
                        holder.fly_boxes[j].in_fly = -1.0f;
                    }
                }
            }

        }

        if (fade_out > 0.0f)
        {
            float prev_fade_out = fade_out;
            fade_out -= dt * 2.0f;
            float fade_alpha = 0.0f; 

            if (fade_out > 1.0f)
            {
                fade_alpha = 2.0f - fade_out;
            }
            else
            {
                if (prev_fade_out > 1.0f)
                {
                    RespawnHero(hero_inst[0]);
                }

                fade_alpha = fade_out;
            }

            if (fade_out < 0.01f)
            {
                fade_out = -1.0f;
                fade_alpha = 0.0f;
            }

            game_menu.SetFade(fade_alpha);
        }

        if (return_to_title > 0.0f)
        {
            return_to_title -= dt;

            if (return_to_title < 0.01f)
            {
                return_to_title = -1.0f;
                game_menu.OnReturnToTitle();
            }
        }

        if (fade_out < 1.0f)
        {
            camera.target_pos_x = hero_inst[0].x;
            camera.target_pos_y = hero_inst[0].y;
        }
    }
}